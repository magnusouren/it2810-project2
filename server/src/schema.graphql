type Movie {
  _id: ID!
  title: String!
  genre_ids: [Genre]!
  overview: String!
  release_date: String!
  adult: Boolean
  backdrop_path: String
  original_language: String
  original_title: String
  popularity: Float
  poster_path: String
  video: Boolean
  vote_average: Float
  vote_count: Int
  isInWatchlist(userID: String): Boolean
}

type Ratings {
  _id: String!
  ratings: [Rating]
}

type Rating {
  movieID: Int!
  rating: Float!
}

type UserWatchlist {
  userID: String!
  movies: [Movie]
}

type Genre {
  _id: Int!
  name: String!
}

type Query {
  getMovies(page: Int!, userID: String): [Movie]
  getMovieById(id: Int!): Movie
  getMovieByTitle(title: String!): Movie
  getMoviesByTitle(title: String!, limit: Int!, offset: Int!): [Movie]
  getMoviesByGenre(page: Int!, genreId: Int!): [Movie]
  getMovieCountByGenre(genreId: Int): Int
  getMoviesByTitleAZ(page: Int!, genreId: Int, order: String!): [Movie]
  getMoviesByRating(page: Int!, genreId: Int, order: String!): [Movie]
  getMovieRatingWithUserID(userID: String!, movieID: Int!): Rating
  getWatchlistByUserID(userID: String!, page: Int!): UserWatchlist
  getWatchlistCountByUserID(userID: String!): Int
  getGenres: [Genre]
}

type Mutation {
  addRating(userID: String!, movieID: Int!, rating: Float!): Rating
  addMovieToWatchlist(userID: String!, movieID: Int!): UserWatchlist
  removeMovieFromWatchlist(userID: String!, movieID: Int!): UserWatchlist
}
